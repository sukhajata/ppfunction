// source: function-service.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.ppfunction.CallDeviceFunctionRequest', null, global);
goog.exportSymbol('proto.ppfunction.DeviceFunction', null, global);
goog.exportSymbol('proto.ppfunction.DeviceFunctions', null, global);
goog.exportSymbol('proto.ppfunction.GetDeviceFunctionsRequest', null, global);
goog.exportSymbol('proto.ppfunction.Response', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ppfunction.CallDeviceFunctionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ppfunction.CallDeviceFunctionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ppfunction.CallDeviceFunctionRequest.displayName = 'proto.ppfunction.CallDeviceFunctionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ppfunction.GetDeviceFunctionsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ppfunction.GetDeviceFunctionsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ppfunction.GetDeviceFunctionsRequest.displayName = 'proto.ppfunction.GetDeviceFunctionsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ppfunction.DeviceFunctions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ppfunction.DeviceFunctions.repeatedFields_, null);
};
goog.inherits(proto.ppfunction.DeviceFunctions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ppfunction.DeviceFunctions.displayName = 'proto.ppfunction.DeviceFunctions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ppfunction.DeviceFunction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ppfunction.DeviceFunction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ppfunction.DeviceFunction.displayName = 'proto.ppfunction.DeviceFunction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ppfunction.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ppfunction.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ppfunction.Response.displayName = 'proto.ppfunction.Response';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ppfunction.CallDeviceFunctionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ppfunction.CallDeviceFunctionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ppfunction.CallDeviceFunctionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ppfunction.CallDeviceFunctionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceeui: jspb.Message.getFieldWithDefault(msg, 1, ""),
    functionname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    param1: jspb.Message.getFieldWithDefault(msg, 3, ""),
    param2: jspb.Message.getFieldWithDefault(msg, 4, ""),
    param3: jspb.Message.getFieldWithDefault(msg, 5, ""),
    param4: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ppfunction.CallDeviceFunctionRequest}
 */
proto.ppfunction.CallDeviceFunctionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ppfunction.CallDeviceFunctionRequest;
  return proto.ppfunction.CallDeviceFunctionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ppfunction.CallDeviceFunctionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ppfunction.CallDeviceFunctionRequest}
 */
proto.ppfunction.CallDeviceFunctionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceeui(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFunctionname(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setParam1(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setParam2(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setParam3(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setParam4(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ppfunction.CallDeviceFunctionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ppfunction.CallDeviceFunctionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ppfunction.CallDeviceFunctionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ppfunction.CallDeviceFunctionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeviceeui();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFunctionname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getParam1();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getParam2();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getParam3();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getParam4();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string deviceEUI = 1;
 * @return {string}
 */
proto.ppfunction.CallDeviceFunctionRequest.prototype.getDeviceeui = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ppfunction.CallDeviceFunctionRequest} returns this
 */
proto.ppfunction.CallDeviceFunctionRequest.prototype.setDeviceeui = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string functionName = 2;
 * @return {string}
 */
proto.ppfunction.CallDeviceFunctionRequest.prototype.getFunctionname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ppfunction.CallDeviceFunctionRequest} returns this
 */
proto.ppfunction.CallDeviceFunctionRequest.prototype.setFunctionname = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string param1 = 3;
 * @return {string}
 */
proto.ppfunction.CallDeviceFunctionRequest.prototype.getParam1 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ppfunction.CallDeviceFunctionRequest} returns this
 */
proto.ppfunction.CallDeviceFunctionRequest.prototype.setParam1 = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string param2 = 4;
 * @return {string}
 */
proto.ppfunction.CallDeviceFunctionRequest.prototype.getParam2 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ppfunction.CallDeviceFunctionRequest} returns this
 */
proto.ppfunction.CallDeviceFunctionRequest.prototype.setParam2 = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string param3 = 5;
 * @return {string}
 */
proto.ppfunction.CallDeviceFunctionRequest.prototype.getParam3 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.ppfunction.CallDeviceFunctionRequest} returns this
 */
proto.ppfunction.CallDeviceFunctionRequest.prototype.setParam3 = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string param4 = 6;
 * @return {string}
 */
proto.ppfunction.CallDeviceFunctionRequest.prototype.getParam4 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.ppfunction.CallDeviceFunctionRequest} returns this
 */
proto.ppfunction.CallDeviceFunctionRequest.prototype.setParam4 = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ppfunction.GetDeviceFunctionsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ppfunction.GetDeviceFunctionsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ppfunction.GetDeviceFunctionsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ppfunction.GetDeviceFunctionsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    identifier: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ppfunction.GetDeviceFunctionsRequest}
 */
proto.ppfunction.GetDeviceFunctionsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ppfunction.GetDeviceFunctionsRequest;
  return proto.ppfunction.GetDeviceFunctionsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ppfunction.GetDeviceFunctionsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ppfunction.GetDeviceFunctionsRequest}
 */
proto.ppfunction.GetDeviceFunctionsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIdentifier(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ppfunction.GetDeviceFunctionsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ppfunction.GetDeviceFunctionsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ppfunction.GetDeviceFunctionsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ppfunction.GetDeviceFunctionsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdentifier();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string identifier = 1;
 * @return {string}
 */
proto.ppfunction.GetDeviceFunctionsRequest.prototype.getIdentifier = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ppfunction.GetDeviceFunctionsRequest} returns this
 */
proto.ppfunction.GetDeviceFunctionsRequest.prototype.setIdentifier = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ppfunction.DeviceFunctions.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ppfunction.DeviceFunctions.prototype.toObject = function(opt_includeInstance) {
  return proto.ppfunction.DeviceFunctions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ppfunction.DeviceFunctions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ppfunction.DeviceFunctions.toObject = function(includeInstance, msg) {
  var f, obj = {
    functionsList: jspb.Message.toObjectList(msg.getFunctionsList(),
    proto.ppfunction.DeviceFunction.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ppfunction.DeviceFunctions}
 */
proto.ppfunction.DeviceFunctions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ppfunction.DeviceFunctions;
  return proto.ppfunction.DeviceFunctions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ppfunction.DeviceFunctions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ppfunction.DeviceFunctions}
 */
proto.ppfunction.DeviceFunctions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ppfunction.DeviceFunction;
      reader.readMessage(value,proto.ppfunction.DeviceFunction.deserializeBinaryFromReader);
      msg.addFunctions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ppfunction.DeviceFunctions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ppfunction.DeviceFunctions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ppfunction.DeviceFunctions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ppfunction.DeviceFunctions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFunctionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.ppfunction.DeviceFunction.serializeBinaryToWriter
    );
  }
};


/**
 * repeated DeviceFunction functions = 1;
 * @return {!Array<!proto.ppfunction.DeviceFunction>}
 */
proto.ppfunction.DeviceFunctions.prototype.getFunctionsList = function() {
  return /** @type{!Array<!proto.ppfunction.DeviceFunction>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ppfunction.DeviceFunction, 1));
};


/**
 * @param {!Array<!proto.ppfunction.DeviceFunction>} value
 * @return {!proto.ppfunction.DeviceFunctions} returns this
*/
proto.ppfunction.DeviceFunctions.prototype.setFunctionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ppfunction.DeviceFunction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ppfunction.DeviceFunction}
 */
proto.ppfunction.DeviceFunctions.prototype.addFunctions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ppfunction.DeviceFunction, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ppfunction.DeviceFunctions} returns this
 */
proto.ppfunction.DeviceFunctions.prototype.clearFunctionsList = function() {
  return this.setFunctionsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ppfunction.DeviceFunction.prototype.toObject = function(opt_includeInstance) {
  return proto.ppfunction.DeviceFunction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ppfunction.DeviceFunction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ppfunction.DeviceFunction.toObject = function(includeInstance, msg) {
  var f, obj = {
    functionname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    index: jspb.Message.getFieldWithDefault(msg, 2, 0),
    param1type: jspb.Message.getFieldWithDefault(msg, 3, ""),
    param2type: jspb.Message.getFieldWithDefault(msg, 4, ""),
    param3type: jspb.Message.getFieldWithDefault(msg, 5, ""),
    param4type: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ppfunction.DeviceFunction}
 */
proto.ppfunction.DeviceFunction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ppfunction.DeviceFunction;
  return proto.ppfunction.DeviceFunction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ppfunction.DeviceFunction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ppfunction.DeviceFunction}
 */
proto.ppfunction.DeviceFunction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFunctionname(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIndex(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setParam1type(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setParam2type(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setParam3type(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setParam4type(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ppfunction.DeviceFunction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ppfunction.DeviceFunction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ppfunction.DeviceFunction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ppfunction.DeviceFunction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFunctionname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIndex();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getParam1type();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getParam2type();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getParam3type();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getParam4type();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string functionName = 1;
 * @return {string}
 */
proto.ppfunction.DeviceFunction.prototype.getFunctionname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ppfunction.DeviceFunction} returns this
 */
proto.ppfunction.DeviceFunction.prototype.setFunctionname = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 index = 2;
 * @return {number}
 */
proto.ppfunction.DeviceFunction.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ppfunction.DeviceFunction} returns this
 */
proto.ppfunction.DeviceFunction.prototype.setIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string param1type = 3;
 * @return {string}
 */
proto.ppfunction.DeviceFunction.prototype.getParam1type = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ppfunction.DeviceFunction} returns this
 */
proto.ppfunction.DeviceFunction.prototype.setParam1type = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string param2type = 4;
 * @return {string}
 */
proto.ppfunction.DeviceFunction.prototype.getParam2type = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ppfunction.DeviceFunction} returns this
 */
proto.ppfunction.DeviceFunction.prototype.setParam2type = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string param3type = 5;
 * @return {string}
 */
proto.ppfunction.DeviceFunction.prototype.getParam3type = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.ppfunction.DeviceFunction} returns this
 */
proto.ppfunction.DeviceFunction.prototype.setParam3type = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string param4type = 6;
 * @return {string}
 */
proto.ppfunction.DeviceFunction.prototype.getParam4type = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.ppfunction.DeviceFunction} returns this
 */
proto.ppfunction.DeviceFunction.prototype.setParam4type = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ppfunction.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.ppfunction.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ppfunction.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ppfunction.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    reply: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ppfunction.Response}
 */
proto.ppfunction.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ppfunction.Response;
  return proto.ppfunction.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ppfunction.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ppfunction.Response}
 */
proto.ppfunction.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setReply(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ppfunction.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ppfunction.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ppfunction.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ppfunction.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReply();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string reply = 1;
 * @return {string}
 */
proto.ppfunction.Response.prototype.getReply = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ppfunction.Response} returns this
 */
proto.ppfunction.Response.prototype.setReply = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


goog.object.extend(exports, proto.ppfunction);
